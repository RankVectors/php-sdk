<?php
/**
 * CreditBalance
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  com.rankvectors
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.rankvectors\com.rankvectors.model;

use \ArrayAccess;
use \com.rankvectors\ObjectSerializer;

/**
 * CreditBalance Class Doc Comment
 *
 * @category Class
 * @package  com.rankvectors
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditBalance implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'success' => 'bool',
        'balance' => '\com.rankvectors\com.rankvectors.model\CreditBalanceInfo',
        'page_limit' => '\com.rankvectors\com.rankvectors.model\PageLimitStatus',
        'spending_limit' => '\com.rankvectors\com.rankvectors.model\SpendingLimitStatus',
        'auto_recharge' => '\com.rankvectors\com.rankvectors.model\AutoRechargeSettings',
        'current_period' => '\com.rankvectors\com.rankvectors.model\PeriodCharges',
        'usage_history' => '\com.rankvectors\com.rankvectors.model\UsageHistoryItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'success' => null,
        'balance' => null,
        'page_limit' => null,
        'spending_limit' => null,
        'auto_recharge' => null,
        'current_period' => null,
        'usage_history' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'success' => false,
        'balance' => false,
        'page_limit' => false,
        'spending_limit' => false,
        'auto_recharge' => false,
        'current_period' => false,
        'usage_history' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'success' => 'success',
        'balance' => 'balance',
        'page_limit' => 'pageLimit',
        'spending_limit' => 'spendingLimit',
        'auto_recharge' => 'autoRecharge',
        'current_period' => 'currentPeriod',
        'usage_history' => 'usageHistory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'success' => 'setSuccess',
        'balance' => 'setBalance',
        'page_limit' => 'setPageLimit',
        'spending_limit' => 'setSpendingLimit',
        'auto_recharge' => 'setAutoRecharge',
        'current_period' => 'setCurrentPeriod',
        'usage_history' => 'setUsageHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'success' => 'getSuccess',
        'balance' => 'getBalance',
        'page_limit' => 'getPageLimit',
        'spending_limit' => 'getSpendingLimit',
        'auto_recharge' => 'getAutoRecharge',
        'current_period' => 'getCurrentPeriod',
        'usage_history' => 'getUsageHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('success', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('page_limit', $data ?? [], null);
        $this->setIfExists('spending_limit', $data ?? [], null);
        $this->setIfExists('auto_recharge', $data ?? [], null);
        $this->setIfExists('current_period', $data ?? [], null);
        $this->setIfExists('usage_history', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['success'] === null) {
            $invalidProperties[] = "'success' can't be null";
        }
        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ($this->container['page_limit'] === null) {
            $invalidProperties[] = "'page_limit' can't be null";
        }
        if ($this->container['spending_limit'] === null) {
            $invalidProperties[] = "'spending_limit' can't be null";
        }
        if ($this->container['auto_recharge'] === null) {
            $invalidProperties[] = "'auto_recharge' can't be null";
        }
        if ($this->container['current_period'] === null) {
            $invalidProperties[] = "'current_period' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets success
     *
     * @return bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param bool $success success
     *
     * @return self
     */
    public function setSuccess($success)
    {
        if (is_null($success)) {
            throw new \InvalidArgumentException('non-nullable success cannot be null');
        }
        $this->container['success'] = $success;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return \com.rankvectors\com.rankvectors.model\CreditBalanceInfo
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \com.rankvectors\com.rankvectors.model\CreditBalanceInfo $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets page_limit
     *
     * @return \com.rankvectors\com.rankvectors.model\PageLimitStatus
     */
    public function getPageLimit()
    {
        return $this->container['page_limit'];
    }

    /**
     * Sets page_limit
     *
     * @param \com.rankvectors\com.rankvectors.model\PageLimitStatus $page_limit page_limit
     *
     * @return self
     */
    public function setPageLimit($page_limit)
    {
        if (is_null($page_limit)) {
            throw new \InvalidArgumentException('non-nullable page_limit cannot be null');
        }
        $this->container['page_limit'] = $page_limit;

        return $this;
    }

    /**
     * Gets spending_limit
     *
     * @return \com.rankvectors\com.rankvectors.model\SpendingLimitStatus
     */
    public function getSpendingLimit()
    {
        return $this->container['spending_limit'];
    }

    /**
     * Sets spending_limit
     *
     * @param \com.rankvectors\com.rankvectors.model\SpendingLimitStatus $spending_limit spending_limit
     *
     * @return self
     */
    public function setSpendingLimit($spending_limit)
    {
        if (is_null($spending_limit)) {
            throw new \InvalidArgumentException('non-nullable spending_limit cannot be null');
        }
        $this->container['spending_limit'] = $spending_limit;

        return $this;
    }

    /**
     * Gets auto_recharge
     *
     * @return \com.rankvectors\com.rankvectors.model\AutoRechargeSettings
     */
    public function getAutoRecharge()
    {
        return $this->container['auto_recharge'];
    }

    /**
     * Sets auto_recharge
     *
     * @param \com.rankvectors\com.rankvectors.model\AutoRechargeSettings $auto_recharge auto_recharge
     *
     * @return self
     */
    public function setAutoRecharge($auto_recharge)
    {
        if (is_null($auto_recharge)) {
            throw new \InvalidArgumentException('non-nullable auto_recharge cannot be null');
        }
        $this->container['auto_recharge'] = $auto_recharge;

        return $this;
    }

    /**
     * Gets current_period
     *
     * @return \com.rankvectors\com.rankvectors.model\PeriodCharges
     */
    public function getCurrentPeriod()
    {
        return $this->container['current_period'];
    }

    /**
     * Sets current_period
     *
     * @param \com.rankvectors\com.rankvectors.model\PeriodCharges $current_period current_period
     *
     * @return self
     */
    public function setCurrentPeriod($current_period)
    {
        if (is_null($current_period)) {
            throw new \InvalidArgumentException('non-nullable current_period cannot be null');
        }
        $this->container['current_period'] = $current_period;

        return $this;
    }

    /**
     * Gets usage_history
     *
     * @return \com.rankvectors\com.rankvectors.model\UsageHistoryItem[]|null
     */
    public function getUsageHistory()
    {
        return $this->container['usage_history'];
    }

    /**
     * Sets usage_history
     *
     * @param \com.rankvectors\com.rankvectors.model\UsageHistoryItem[]|null $usage_history Usage history (if requested)
     *
     * @return self
     */
    public function setUsageHistory($usage_history)
    {
        if (is_null($usage_history)) {
            throw new \InvalidArgumentException('non-nullable usage_history cannot be null');
        }
        $this->container['usage_history'] = $usage_history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


