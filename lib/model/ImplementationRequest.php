<?php
/**
 * ImplementationRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  com.rankvectors
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.rankvectors\com.rankvectors.model;

use \ArrayAccess;
use \com.rankvectors\ObjectSerializer;

/**
 * ImplementationRequest Class Doc Comment
 *
 * @category Class
 * @package  com.rankvectors
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImplementationRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImplementationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'suggestion_ids' => 'string[]',
        'platform' => 'string',
        'credentials' => '\com.rankvectors\com.rankvectors.model\CustomCredentials',
        'skip_content_verification' => 'bool',
        'implementation_method' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'suggestion_ids' => null,
        'platform' => null,
        'credentials' => null,
        'skip_content_verification' => null,
        'implementation_method' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'suggestion_ids' => false,
        'platform' => false,
        'credentials' => false,
        'skip_content_verification' => false,
        'implementation_method' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'suggestion_ids' => 'suggestionIds',
        'platform' => 'platform',
        'credentials' => 'credentials',
        'skip_content_verification' => 'skipContentVerification',
        'implementation_method' => 'implementationMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'suggestion_ids' => 'setSuggestionIds',
        'platform' => 'setPlatform',
        'credentials' => 'setCredentials',
        'skip_content_verification' => 'setSkipContentVerification',
        'implementation_method' => 'setImplementationMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'suggestion_ids' => 'getSuggestionIds',
        'platform' => 'getPlatform',
        'credentials' => 'getCredentials',
        'skip_content_verification' => 'getSkipContentVerification',
        'implementation_method' => 'getImplementationMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PLATFORM_CUSTOM = 'custom';
    public const IMPLEMENTATION_METHOD_API = 'api';
    public const IMPLEMENTATION_METHOD_MANUAL = 'manual';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlatformAllowableValues()
    {
        return [
            self::PLATFORM_CUSTOM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getImplementationMethodAllowableValues()
    {
        return [
            self::IMPLEMENTATION_METHOD_API,
            self::IMPLEMENTATION_METHOD_MANUAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('suggestion_ids', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('credentials', $data ?? [], null);
        $this->setIfExists('skip_content_verification', $data ?? [], false);
        $this->setIfExists('implementation_method', $data ?? [], 'api');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['suggestion_ids'] === null) {
            $invalidProperties[] = "'suggestion_ids' can't be null";
        }
        if ((count($this->container['suggestion_ids']) < 1)) {
            $invalidProperties[] = "invalid value for 'suggestion_ids', number of items must be greater than or equal to 1.";
        }

        if ($this->container['platform'] === null) {
            $invalidProperties[] = "'platform' can't be null";
        }
        $allowedValues = $this->getPlatformAllowableValues();
        if (!is_null($this->container['platform']) && !in_array($this->container['platform'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'platform', must be one of '%s'",
                $this->container['platform'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['credentials'] === null) {
            $invalidProperties[] = "'credentials' can't be null";
        }
        $allowedValues = $this->getImplementationMethodAllowableValues();
        if (!is_null($this->container['implementation_method']) && !in_array($this->container['implementation_method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'implementation_method', must be one of '%s'",
                $this->container['implementation_method'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets suggestion_ids
     *
     * @return string[]
     */
    public function getSuggestionIds()
    {
        return $this->container['suggestion_ids'];
    }

    /**
     * Sets suggestion_ids
     *
     * @param string[] $suggestion_ids Array of suggestion IDs to implement
     *
     * @return self
     */
    public function setSuggestionIds($suggestion_ids)
    {
        if (is_null($suggestion_ids)) {
            throw new \InvalidArgumentException('non-nullable suggestion_ids cannot be null');
        }


        if ((count($suggestion_ids) < 1)) {
            throw new \InvalidArgumentException('invalid length for $suggestion_ids when calling ImplementationRequest., number of items must be greater than or equal to 1.');
        }
        $this->container['suggestion_ids'] = $suggestion_ids;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform Platform type
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        if (is_null($platform)) {
            throw new \InvalidArgumentException('non-nullable platform cannot be null');
        }
        $allowedValues = $this->getPlatformAllowableValues();
        if (!in_array($platform, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'platform', must be one of '%s'",
                    $platform,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return \com.rankvectors\com.rankvectors.model\CustomCredentials
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param \com.rankvectors\com.rankvectors.model\CustomCredentials $credentials credentials
     *
     * @return self
     */
    public function setCredentials($credentials)
    {
        if (is_null($credentials)) {
            throw new \InvalidArgumentException('non-nullable credentials cannot be null');
        }
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets skip_content_verification
     *
     * @return bool|null
     */
    public function getSkipContentVerification()
    {
        return $this->container['skip_content_verification'];
    }

    /**
     * Sets skip_content_verification
     *
     * @param bool|null $skip_content_verification Skip content change detection
     *
     * @return self
     */
    public function setSkipContentVerification($skip_content_verification)
    {
        if (is_null($skip_content_verification)) {
            throw new \InvalidArgumentException('non-nullable skip_content_verification cannot be null');
        }
        $this->container['skip_content_verification'] = $skip_content_verification;

        return $this;
    }

    /**
     * Gets implementation_method
     *
     * @return string|null
     */
    public function getImplementationMethod()
    {
        return $this->container['implementation_method'];
    }

    /**
     * Sets implementation_method
     *
     * @param string|null $implementation_method Implementation method
     *
     * @return self
     */
    public function setImplementationMethod($implementation_method)
    {
        if (is_null($implementation_method)) {
            throw new \InvalidArgumentException('non-nullable implementation_method cannot be null');
        }
        $allowedValues = $this->getImplementationMethodAllowableValues();
        if (!in_array($implementation_method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'implementation_method', must be one of '%s'",
                    $implementation_method,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['implementation_method'] = $implementation_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


