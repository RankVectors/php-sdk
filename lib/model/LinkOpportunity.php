<?php
/**
 * LinkOpportunity
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  com.rankvectors
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RankVectors API
 *
 * Intelligent internal linking optimization API using AI.   RankVectors helps you automatically discover and implement optimal internal links  across your website to improve SEO performance and user experience.  ## Key Features - **AI-Powered Analysis**: Uses OpenAI embeddings to find optimal linking opportunities - **Smart Crawling**: Automatically crawls and analyzes your website content - **Automated Implementation**: Implement links via webhooks or manual instructions - **Credit-Based System**: Pay-per-use model with transparent pricing - **Multi-Platform Support**: Works with any CMS or platform via REST API  ## Getting Started 1. Create a project with your website URL 2. Start a crawl to analyze your content 3. Generate AI-powered link suggestions 4. Implement suggestions via API or webhook 5. Track performance and manage credits  ## Authentication All API endpoints require authentication using your RankVectors API key. Include your API key in the `Authorization` header: ``` Authorization: Bearer YOUR_API_KEY ```  Get your API key from your RankVectors dashboard: Settings â†’ API Keys
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@rankvectors.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.rankvectors\com.rankvectors.model;

use \ArrayAccess;
use \com.rankvectors\ObjectSerializer;

/**
 * LinkOpportunity Class Doc Comment
 *
 * @category Class
 * @package  com.rankvectors
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LinkOpportunity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LinkOpportunity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'relevance_score' => 'float',
        'anchor_text' => 'string',
        'context' => 'string',
        'source_page' => '\com.rankvectors\com.rankvectors.model\PageInfo',
        'target_page' => '\com.rankvectors\com.rankvectors.model\PageInfo',
        'reasoning' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'relevance_score' => null,
        'anchor_text' => null,
        'context' => null,
        'source_page' => null,
        'target_page' => null,
        'reasoning' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'relevance_score' => false,
        'anchor_text' => false,
        'context' => false,
        'source_page' => false,
        'target_page' => false,
        'reasoning' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'relevance_score' => 'relevanceScore',
        'anchor_text' => 'anchorText',
        'context' => 'context',
        'source_page' => 'sourcePage',
        'target_page' => 'targetPage',
        'reasoning' => 'reasoning'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'relevance_score' => 'setRelevanceScore',
        'anchor_text' => 'setAnchorText',
        'context' => 'setContext',
        'source_page' => 'setSourcePage',
        'target_page' => 'setTargetPage',
        'reasoning' => 'setReasoning'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'relevance_score' => 'getRelevanceScore',
        'anchor_text' => 'getAnchorText',
        'context' => 'getContext',
        'source_page' => 'getSourcePage',
        'target_page' => 'getTargetPage',
        'reasoning' => 'getReasoning'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('relevance_score', $data ?? [], null);
        $this->setIfExists('anchor_text', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('source_page', $data ?? [], null);
        $this->setIfExists('target_page', $data ?? [], null);
        $this->setIfExists('reasoning', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['relevance_score'] === null) {
            $invalidProperties[] = "'relevance_score' can't be null";
        }
        if (($this->container['relevance_score'] > 1)) {
            $invalidProperties[] = "invalid value for 'relevance_score', must be smaller than or equal to 1.";
        }

        if (($this->container['relevance_score'] < 0)) {
            $invalidProperties[] = "invalid value for 'relevance_score', must be bigger than or equal to 0.";
        }

        if ($this->container['anchor_text'] === null) {
            $invalidProperties[] = "'anchor_text' can't be null";
        }
        if ($this->container['source_page'] === null) {
            $invalidProperties[] = "'source_page' can't be null";
        }
        if ($this->container['target_page'] === null) {
            $invalidProperties[] = "'target_page' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets relevance_score
     *
     * @return float
     */
    public function getRelevanceScore()
    {
        return $this->container['relevance_score'];
    }

    /**
     * Sets relevance_score
     *
     * @param float $relevance_score AI-calculated relevance score (0-1)
     *
     * @return self
     */
    public function setRelevanceScore($relevance_score)
    {
        if (is_null($relevance_score)) {
            throw new \InvalidArgumentException('non-nullable relevance_score cannot be null');
        }

        if (($relevance_score > 1)) {
            throw new \InvalidArgumentException('invalid value for $relevance_score when calling LinkOpportunity., must be smaller than or equal to 1.');
        }
        if (($relevance_score < 0)) {
            throw new \InvalidArgumentException('invalid value for $relevance_score when calling LinkOpportunity., must be bigger than or equal to 0.');
        }

        $this->container['relevance_score'] = $relevance_score;

        return $this;
    }

    /**
     * Gets anchor_text
     *
     * @return string
     */
    public function getAnchorText()
    {
        return $this->container['anchor_text'];
    }

    /**
     * Sets anchor_text
     *
     * @param string $anchor_text Suggested anchor text
     *
     * @return self
     */
    public function setAnchorText($anchor_text)
    {
        if (is_null($anchor_text)) {
            throw new \InvalidArgumentException('non-nullable anchor_text cannot be null');
        }
        $this->container['anchor_text'] = $anchor_text;

        return $this;
    }

    /**
     * Gets context
     *
     * @return string|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string|null $context Context where the link should be placed
     *
     * @return self
     */
    public function setContext($context)
    {
        if (is_null($context)) {
            throw new \InvalidArgumentException('non-nullable context cannot be null');
        }
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets source_page
     *
     * @return \com.rankvectors\com.rankvectors.model\PageInfo
     */
    public function getSourcePage()
    {
        return $this->container['source_page'];
    }

    /**
     * Sets source_page
     *
     * @param \com.rankvectors\com.rankvectors.model\PageInfo $source_page source_page
     *
     * @return self
     */
    public function setSourcePage($source_page)
    {
        if (is_null($source_page)) {
            throw new \InvalidArgumentException('non-nullable source_page cannot be null');
        }
        $this->container['source_page'] = $source_page;

        return $this;
    }

    /**
     * Gets target_page
     *
     * @return \com.rankvectors\com.rankvectors.model\PageInfo
     */
    public function getTargetPage()
    {
        return $this->container['target_page'];
    }

    /**
     * Sets target_page
     *
     * @param \com.rankvectors\com.rankvectors.model\PageInfo $target_page target_page
     *
     * @return self
     */
    public function setTargetPage($target_page)
    {
        if (is_null($target_page)) {
            throw new \InvalidArgumentException('non-nullable target_page cannot be null');
        }
        $this->container['target_page'] = $target_page;

        return $this;
    }

    /**
     * Gets reasoning
     *
     * @return string|null
     */
    public function getReasoning()
    {
        return $this->container['reasoning'];
    }

    /**
     * Sets reasoning
     *
     * @param string|null $reasoning AI reasoning for the suggestion
     *
     * @return self
     */
    public function setReasoning($reasoning)
    {
        if (is_null($reasoning)) {
            throw new \InvalidArgumentException('non-nullable reasoning cannot be null');
        }
        $this->container['reasoning'] = $reasoning;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer|string $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet(mixed $offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer|string $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


